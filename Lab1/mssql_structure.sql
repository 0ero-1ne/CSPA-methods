USE MASTER;
GO;

IF DB_ID('UNIVERSITY') IS NOT NULL
    DROP DATABASE UNIVERSITY;
GO

CREATE DATABASE UNIVERSITY;
GO;

USE UNIVERSITY;
GO;

CREATE TABLE POSITION (
    POSITION_NAME NVARCHAR(50) PRIMARY KEY
);

CREATE TABLE FACULTY (
    FACULTY NVARCHAR(10) PRIMARY KEY,
    FACULTY_NAME NVARCHAR(100)
);

CREATE TABLE PULPIT (
    PULPIT NVARCHAR(10) PRIMARY KEY,
    FACULTY NVARCHAR(10),
    PULPIT_NAME NVARCHAR(150),
    CONSTRAINT FK_PULPIT_FACULTY
        FOREIGN KEY (FACULTY)
        REFERENCES FACULTY(FACULTY)
);

CREATE TABLE DISCIPLINE (
    DISCIPLINE NVARCHAR(10) PRIMARY KEY,
    PULPIT NVARCHAR(10),
    DISCIPLINE_NAME NVARCHAR(150),
    CONSTRAINT FK_DISCIPLINE_PULPIT
        FOREIGN KEY (PULPIT)
        REFERENCES PULPIT(PULPIT)
);

CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID INT PRIMARY KEY,
    POSITION_NAME NVARCHAR(50),
    PULPIT NVARCHAR(10),
    NAME NVARCHAR(150),
    PHONE NCHAR(12),
    CONSTRAINT FK_EMPLOYEE_POSITION
        FOREIGN KEY (POSITION_NAME)
        REFERENCES POSITION(POSITION_NAME),
    CONSTRAINT FK_EMPLOYEE_PULPIT
        FOREIGN KEY (PULPIT)
        REFERENCES PULPIT(PULPIT)
);

CREATE TABLE PULPIT_MANAGER (
    MANAGER_ID INT PRIMARY KEY,
    EMPLOYEE_ID INT,
    PULPIT NVARCHAR(10),
    CONSTRAINT FK_PULPIT_MANAGER_EMPLOYEE
        FOREIGN KEY (EMPLOYEE_ID)
        REFERENCES EMPLOYEE(EMPLOYEE_ID),
    CONSTRAINT FK_PULPIT_MANAGER_PULPIT
        FOREIGN KEY (PULPIT)
        REFERENCES PULPIT(PULPIT)
);

CREATE TABLE FACULTY_MANAGER (
    MANAGER_ID INT PRIMARY KEY,
    EMPLOYEE_ID INT,
    FACULTY NVARCHAR(10),
    CONSTRAINT FK_FACULTY_MANAGER_EMPLOYEE
        FOREIGN KEY (EMPLOYEE_ID)
        REFERENCES EMPLOYEE(EMPLOYEE_ID),
    CONSTRAINT FK_FACULTY_MANAGER_FACULTY
        FOREIGN KEY (FACULTY)
        REFERENCES FACULTY(FACULTY)
);

CREATE TABLE SPECIALITY (
    SPECIALITY_CODE NVARCHAR(10) PRIMARY KEY,
    FACULTY NVARCHAR(10),
    SPECIALITY_NAME NVARCHAR(100),
    QUALIFICATION NVARCHAR(100),
    CONSTRAINT FK_SPECIALITY_FACULTY
        FOREIGN KEY (FACULTY)
        REFERENCES FACULTY(FACULTY)
);

CREATE TABLE "GROUP" (
    GROUP_ID INT PRIMARY KEY,
    SPECIALITY_CODE NVARCHAR(10),
    START_YEAR INT,
    CONSTRAINT FK_GROUP_SPECIALITY
        FOREIGN KEY (SPECIALITY_CODE)
        REFERENCES SPECIALITY(SPECIALITY_CODE)
);

CREATE TABLE STUDENT (
    STUDENT_ID INT PRIMARY KEY,
    GROUP_ID INT,
    NAME NVARCHAR(100),
    BIRTH_DATE DATE,
    PHONE NCHAR(12),
    CONSTRAINT FK_STUDENT_GROUP
        FOREIGN KEY (GROUP_ID)
        REFERENCES "GROUP"(GROUP_ID)
);

CREATE TABLE ADDRESS (
    ADDRESS_ID INT PRIMARY KEY,
    REGION NVARCHAR(15),
    CITY NVARCHAR(20),
    STREET NVARCHAR(25),
    BUILDING_NUMBER NVARCHAR(5)
);

CREATE TABLE BUILDING (
    BUILDING_ID NVARCHAR(5) PRIMARY KEY,
    BUILDING_ADDRESS INT,
    CONSTRAINT FK_BUILDING_ADDRESS
        FOREIGN KEY (BUILDING_ADDRESS)
        REFERENCES ADDRESS(ADDRESS_ID)
);

CREATE TABLE AUDITORIUM_TYPE (
    AUDITORIUM_TYPE NVARCHAR(10) PRIMARY KEY,
    AUDITORIUM_NAME NVARCHAR(30)
);

CREATE TABLE AUDITORIUM (
    AUDITORIUM NVARCHAR(10) PRIMARY KEY,
    AUDITORIUM_TYPE NVARCHAR(10),
    BUILDING_ID NVARCHAR(5),
    CAPACITY INT,
    CONSTRAINT FK_AUDITORIUM_BUILDING
        FOREIGN KEY (BUILDING_ID)
        REFERENCES BUILDING(BUILDING_ID)
);

CREATE TABLE MARK (
    MARK_ID INT PRIMARY KEY,
    STUDENT_ID INT,
    EMPLOYEE_ID INT,
    DISCIPLINE NVARCHAR(10),
    MARK INT,
    MARK_DATE DATE,
    CONSTRAINT FK_MARK_STUDENT
        FOREIGN KEY (STUDENT_ID)
        REFERENCES STUDENT(STUDENT_ID),
    CONSTRAINT FK_MARK_EMPLOYEE
        FOREIGN KEY (EMPLOYEE_ID)
        REFERENCES EMPLOYEE(EMPLOYEE_ID),
    CONSTRAINT FK_MARK_DISCIPLINE
        FOREIGN KEY (DISCIPLINE)
        REFERENCES DISCIPLINE(DISCIPLINE)
);
GO;

-- Procedures

CREATE OR ALTER PROCEDURE ENROLL_STUDENT_IN_GROUP @STUDENT_ID INT, @GROUP_ID INT
AS BEGIN
    UPDATE STUDENT
    SET STUDENT.GROUP_ID = @GROUP_ID
    WHERE STUDENT.STUDENT_ID = @STUDENT_ID;
END;
GO;

CREATE OR ALTER PROCEDURE EXPEL_STUDENT_FROM_GROUP @STUDENT_ID INT AS
BEGIN
    UPDATE STUDENT
    SET GROUP_ID = NULL
    WHERE STUDENT_ID = @STUDENT_ID;
END;
GO;

CREATE OR ALTER PROCEDURE SET_NEW_FACULTY_DEAN @FACULTY NVARCHAR(10), @EMPLOYEE_ID INT
AS BEGIN
    UPDATE FACULTY_MANAGER
    SET EMPLOYEE_ID = @EMPLOYEE_ID
    WHERE FACULTY = @FACULTY;
END;
GO;

CREATE OR ALTER PROCEDURE SET_NEW_PULPIT_MANAGER @PULPIT NVARCHAR(10), @EMPLOYEE_ID INT
AS BEGIN
    UPDATE PULPIT_MANAGER
    SET EMPLOYEE_ID = @EMPLOYEE_ID
    WHERE PULPIT = @PULPIT;
END;
GO;

-- Functions

CREATE OR ALTER FUNCTION GET_FACULTY_BY_GROUP_ID(@ID INT) RETURNS NVARCHAR(10)
AS BEGIN
    declare @faculty NVARCHAR(10) = '';
    SET @faculty = (SELECT SPECIALITY.FACULTY
    FROM SPECIALITY
    JOIN "GROUP" ON "GROUP".SPECIALITY_CODE = SPECIALITY.SPECIALITY_CODE
    WHERE "GROUP".GROUP_ID = @ID);
    RETURN @faculty;
END;
GO;

CREATE OR ALTER FUNCTION GET_STUDENTS_AVERAGE_MARK() RETURNS TABLE
AS RETURN
    SELECT SPECIALITY.FACULTY AS 'Faculty',
           STUDENT.NAME AS 'Full name',
           AVG(MARK.MARK) AS 'Average mark'
    FROM STUDENT
    JOIN [GROUP] ON STUDENT.GROUP_ID = [GROUP].GROUP_ID
    JOIN MARK ON MARK.STUDENT_ID = STUDENT.STUDENT_ID
    JOIN SPECIALITY ON [GROUP].SPECIALITY_CODE = SPECIALITY.SPECIALITY_CODE
    GROUP BY STUDENT.NAME, SPECIALITY.FACULTY;
GO;

CREATE OR ALTER FUNCTION GET_EXCELLENT_STUDENTS() RETURNS TABLE
AS RETURN
    SELECT STUDENT.NAME AS 'Full name',
           AVG(MARK.MARK) AS 'Average mark'
    FROM STUDENT
    JOIN MARK ON MARK.STUDENT_ID = STUDENT.STUDENT_ID
    GROUP BY STUDENT.NAME
    HAVING AVG(MARK.MARK) > 4.5;
GO;

-- Views

CREATE OR ALTER VIEW FACULTIES_DEAN AS
SELECT FACULTY.FACULTY, FACULTY.FACULTY_NAME, EMPLOYEE.NAME
FROM FACULTY
JOIN FACULTY_MANAGER ON FACULTY_MANAGER.FACULTY = FACULTY.FACULTY
JOIN EMPLOYEE ON FACULTY_MANAGER.EMPLOYEE_ID = EMPLOYEE.EMPLOYEE_ID;
GO;

CREATE OR ALTER VIEW PULPITS_MANAGER AS
SELECT PULPIT.FACULTY, PULPIT.PULPIT, PULPIT.PULPIT_NAME, EMPLOYEE.NAME
FROM PULPIT
JOIN PULPIT_MANAGER ON PULPIT.PULPIT = PULPIT_MANAGER.PULPIT
JOIN EMPLOYEE ON PULPIT_MANAGER.EMPLOYEE_ID = EMPLOYEE.EMPLOYEE_ID;
GO;

CREATE OR ALTER VIEW PULPITS_EMPLOYEES AS
SELECT PULPIT.PULPIT AS 'Pulpit short name',
       PULPIT.PULPIT_NAME AS 'Pulpit full name',
       EMPLOYEE.NAME AS 'Full name'
FROM PULPIT
JOIN EMPLOYEE ON PULPIT.PULPIT = EMPLOYEE.PULPIT;
GO;

-- Indexes

CREATE INDEX STUDENT_NAME_INDEX ON STUDENT(NAME);
CREATE INDEX EMPLOYEE_NAME_INDEX ON EMPLOYEE(NAME);
CREATE INDEX DISCIPLINE_NAME_INDEX ON DISCIPLINE(DISCIPLINE_NAME);
CREATE INDEX PULPIT_NAME_INDEX ON PULPIT(PULPIT_NAME);
CREATE INDEX ADDRESS_INDEX ON ADDRESS(REGION, CITY, STREET, BUILDING_NUMBER);
CREATE INDEX AUDITORIUM_TYPE_CAPACITY_INDEX ON AUDITORIUM(AUDITORIUM_TYPE, CAPACITY);
GO;

-- Triggers

CREATE OR ALTER TRIGGER TR_STUDENT_DELETE ON STUDENT AFTER DELETE
AS BEGIN
    DELETE FROM MARK WHERE STUDENT_ID = (SELECT STUDENT_ID FROM DELETED);
END;
GO;

CREATE OR ALTER TRIGGER TR_DELETE_EMPLOYEE ON EMPLOYEE AFTER DELETE
AS BEGIN
    DELETE FROM FACULTY_MANAGER WHERE EMPLOYEE_ID = (SELECT EMPLOYEE_ID FROM DELETED);
    DELETE FROM PULPIT_MANAGER WHERE EMPLOYEE_ID = (SELECT EMPLOYEE_ID FROM DELETED);
END;
GO;